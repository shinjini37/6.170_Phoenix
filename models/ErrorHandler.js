/**
 * Created by Shinjini on 11/17/2016.
 */

/**
 * This is a class to encapsulate all error handling functions.
 * @returns {ErrorHandler}
 * @constructor
 */
var ErrorHandler = function() {
    var that = Object.create(ErrorHandler);

    that.errNums = {
        userNotInDB : [1, "User is not registered."],
        userAlreadyInDB: [2,  "User is already registered."],
        passwordWrongLength: [3,  "Password is not the correct length."],
        passwordWrongCharacters: [4, "Password has invalid characters."],
        passwordIncorrect: [5, "Incorrect Password."],
        invalidZipcode: [6, "Invalid Zipcode."],
        alreadyLoggedIn: [7, "You are already logged in."],
        notLoggedIn: [8, "You are not logged in."],
        availabilityWrongFormat: [9, "The availability is not correctly formatted."],
        userNotInConnection: [10, "User is not part of the connection"],
        userAlreadyConnected: [11, "The user is already connected."],
        invalidConnectionId: [13, "The connection does not exist."],
        notAuthorized: [14, "You are not authorized to view this."],
        invalidTopicOverlap: [15, "The option chosen for topic overlap is not valid."],
        invalidLocationRadius: [16, "The radius give for location radius is not valid."],
        invalidCalendarRange: [17, "The range for the calendar is invalid."],
        invalidNoteLength: [18, "The note must be more than 0 and less than 250 characters long."],
        noteDoesNotExistError: [22, "The note does not exist."],
        invalidAboutMeLength: [19, "The about me must be less than 250 characters long."],
        invalidConnectionSettings: [20, "Connection settings can only be booleans."],
        invalidTopic: [21, "The topic does not exist."],
        cannotConnectInterestDisinterestBlockSelf: [22,
            'You cannot connect to, be interested in, be disinterested in connecting to or block yourself.'],
        noteNotInConnection: [23, 'This note is not part of the given connection.']
    };




    /**
     * An object to encapsulate an error generated by the app
     * TODO might need to change this to reflect how javascript errors are structured
     * @param errorNumberAndmessage
     * @returns {that.appError}
     */
    that.appError = function(errorNumberAndmessage){
        var subthat = Object.create(that.appError);
        subthat.errorNumber = errorNumberAndmessage[0];
        subthat.message = errorNumberAndmessage[1];
        Object.freeze(subthat);
        return subthat;
    };


    /**
     * Handles errors.
     *
     * @param err
     * @param res
     */
    that.handleError = function(err, res){
        // handle the error
        var data = {}; // set later accordingly
        data.success = false;
        data.message = err.message;
        data.error = err;
        res.json(data);
    };

    Object.freeze(that);
    return that;
};

module.exports = ErrorHandler();
